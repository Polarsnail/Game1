import java.util.*;

public class battleSimulator {
	public static int gobNumbers = 1; //+ (int)(Math.random()*3);
	static void getBattle() { 
		
		//Thread.sleep(3000);
		System.out.println("");
		levelGenerator.itemLevel = 1;
		weaponGenerator.getWeapon();
		System.out.println("");
		int allyInit = 10;
	    int alliesHealth = characterGenerator.healthPicker;  
		int alliesInitiative = allyInit; 
		boolean alliesGoesFirst = false; 
		boolean allies = true; 
		boolean enemyGoesFirst = false;  
		boolean turn = true; 
		int firstTurn = 0;{
		//This is for Debug use!
		//System.out.println(gobNumbers);
			
			Scanner userImput = new Scanner(System.in);{
				
			
            monsterGenerator.getMonster();
          //This decides who goes first
             if (firstTurn < 1) { 
                if (alliesInitiative >= monsterGenerator.monsterInit) {  
                alliesGoesFirst = true;
                    System.out.println("Allies go first!");
                    firstTurn = firstTurn + 1; 
            } else { 
                enemyGoesFirst = true; 
                if(gobNumbers == 1){
                    System.out.println(monsterGenerator.monster + " goes first!" ); 
                }
                else if(gobNumbers >= 2){
                    System.out.println(monsterGenerator.monster + " goes first!"); 
                }
                firstTurn = firstTurn + 1; 
                } 
            }
        while (turn == true){
        	int heal = 1 + (int)(Math.random()*10);
        	int allyAttack = weaponGenerator.damage - 1 + (int)(Math.random()*5);
        	// Did someone die?
        				if (allies == false) { 
        					System.out.println("The allies died!");
        					turn = false; 
        					return; 
        				} else if (monsterGenerator.monsterAlive == false) {
        					if(gobNumbers == 1)
        					{
        				    System.out.println("The battle has ended!");
        					}
        					else if(gobNumbers >= 2){
        						System.out.println("All Goblins have been slain!");
        					} 
        					turn = false; 
        					System.out.println("");
        					System.out.println("[LOOT]");
        					weaponGenerator.getWeapon();
        					lootSystem.getLoot();
        					System.out.println("");
        					expSystem.getExp();
        					return; 
        				}  	
        	//allies go first			
        	if(alliesGoesFirst == true)
        		{
        		System.out.println("a.Attack b.Heal c.get hit");
        		String userImp = userImput.nextLine();
        		if(monsterGenerator.monsterAlive == true && allies == true)
        			{
        			switch(userImp)
        				{
        				case "a":  monsterGenerator.monsterHealth = monsterGenerator.monsterHealth - allyAttack ;
        				System.out.println("You hit the " + monsterGenerator.monster + " for " + allyAttack + " damage." +
        						" " + monsterGenerator.monster + " has " + monsterGenerator.monsterHealth + " health remaining!"); break;
        				case "b":
        				    alliesHealth = alliesHealth + heal;
        					System.out.println("you heal for " + heal +" health"); 
        				if (alliesHealth >characterGenerator.healthPicker) {
        					alliesHealth = characterGenerator.healthPicker;
        					System.out.println("You are now at maximum health");
        				}
        				case "c": alliesHealth = alliesHealth - monsterGenerator.monsterDamage; System.out.println(alliesHealth +
        						" health remaining"); break;
        				}
						
					if (monsterGenerator.monsterHealth <= 0) {
						monsterGenerator.monsterHealth = 0;
						monsterGenerator.monsterAlive = false;
						}
					
        			}
        		if(monsterGenerator.monsterAlive == true && allies == true)
        			{
        			alliesHealth = alliesHealth - monsterGenerator.monsterDamage;
        			System.out.println(monsterGenerator.monster +" attacks for " + monsterGenerator.monsterDamage
        				+ " damage. " + alliesHealth + " health remaining");
    						
        			}
        		if (alliesHealth <= 0) {
					alliesHealth = 0;
					allies = false;
					}
        		}
        	//enemy goes first
        	if(enemyGoesFirst == true)
        		{
        		if(monsterGenerator.monsterAlive == true && allies == true)
    			{
    			alliesHealth = alliesHealth - monsterGenerator.monsterDamage;
    			System.out.println(monsterGenerator.monster +" attacks for " + monsterGenerator.monsterDamage
    				+ " damage. " + alliesHealth + " health remaining");
						
    			}
    		if (alliesHealth <= 0) {
				alliesHealth = 0;
				allies = false;
				}
    		if(monsterGenerator.monsterAlive == true && allies == true)
			{
    		System.out.println("a.Attack b.Heal c.get hit");
        	String userImp2 = userImput.nextLine();
			switch(userImp2)
				{
				case "a":  monsterGenerator.monsterHealth = monsterGenerator.monsterHealth - allyAttack ;
				System.out.println("You hit the " + monsterGenerator.monster + " for " + allyAttack + " damage." +
						" " + monsterGenerator.monster + " has " + monsterGenerator.monsterHealth + " health remaining!"); break;
				case "b":
				    alliesHealth = alliesHealth + heal;
					System.out.println("you heal for " + heal +" health"); 
				if (alliesHealth >characterGenerator.healthPicker) {
					alliesHealth = characterGenerator.healthPicker;
					System.out.println("You are now at maximum health");
				}
				break;
				case "c": alliesHealth = alliesHealth - monsterGenerator.monsterDamage; System.out.println(alliesHealth +
						" health remaining"); break;
				}
				
			if (monsterGenerator.monsterHealth <= 0) {
				monsterGenerator.monsterHealth = 0;
				monsterGenerator.monsterAlive = false;
				}
			
			}
        		
        		
        		}
        }
		
			
        } 
		}
	}
}

